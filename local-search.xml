<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【ACM】一道经典的模拟题——回文串判断</title>
    <link href="/2021/02/06/%E3%80%90ACM%E3%80%91%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84%E6%A8%A1%E6%8B%9F%E9%A2%98%E2%80%94%E2%80%94%E5%9B%9E%E6%96%87%E4%B8%B2%E5%88%A4%E6%96%AD/"/>
    <url>/2021/02/06/%E3%80%90ACM%E3%80%91%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84%E6%A8%A1%E6%8B%9F%E9%A2%98%E2%80%94%E2%80%94%E5%9B%9E%E6%96%87%E4%B8%B2%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>输入一串字符（长度小于100），判断该串字符是否是回文串（正序读与逆序读内容相同）。</p><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入一串字符（长度小于100）。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>若该串字符是回文串输出“yes”，否则输出”no“。</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">asdfgfdsa</span><br></code></pre></td></tr></table></figure><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>  直接按照题目所给的要求，直接从字符串的第一个字符开始依次和尾部的倒数第一个字符进行比较如果相同则继续向下，否则跳出结束输出错误结果。</p><p>​    <strong>for(int i=0;i&lt;str.length();i++)</strong></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>因为是回文串的形式，所以从最中间向两边是对称的，所以我们只需要便利1/2的长度就能求出最后的结果。长度为偶数的话就会两两匹配，奇数个的长度的话就会最后单剩下中间的字符，自身与自身比较一定相同。</p><p><strong>for(int i=0;i&lt;=str.length()/2;i++)</strong></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> str;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; str)<br>    &#123;<br>        <span class="hljs-keyword">int</span> len = str.length();<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=len/<span class="hljs-number">2</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(str[i] != str[len<span class="hljs-number">-1</span>-i]) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;no&quot;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;yes&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ACM】常用STL整理</title>
    <link href="/2021/02/01/%E3%80%90ACM%E3%80%91%E5%B8%B8%E7%94%A8STL%E6%95%B4%E7%90%86/"/>
    <url>/2021/02/01/%E3%80%90ACM%E3%80%91%E5%B8%B8%E7%94%A8STL%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青蛙过河题解</title>
    <link href="/2021/02/01/%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3%E9%A2%98%E8%A7%A3/"/>
    <url>/2021/02/01/%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>我会以图片的形式简单形容一下思路，能够更好的理解。</p><a id="more"></a><p><img src="/Users/l_collection/blog/source/img/img001.jpeg"></p><p>可以很明显的推导出，整个递归的边界就是<strong>tiao(0,y) = y+1 ** ，而左右两岸之间没多一根柱子的话就会使他的数量翻一倍，</strong>tiao(x,y) = tiao(x-1,y)*2** 这个公式是推导出来的另一种形式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">tiao</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> y+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*tiao(x<span class="hljs-number">-1</span>,y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t)!=EOF)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x,y;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; tiao(x,y) &lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>这个题目整体还是以道很简单的递归的题目，同时也是看自己的数学上的推导能力，接下来还是要自己动手多推导，同时也要提高自己的代码实现能力，又很多的题目都是有想法的但是最后还是没有足够的代码基础进行实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SDUT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux从入门到入土</title>
    <link href="/2021/01/31/linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
    <url>/2021/01/31/linux%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="再次转战Linux系统"><a href="#再次转战Linux系统" class="headerlink" title="再次转战Linux系统"></a>再次转战Linux系统</h3><a id="more"></a><p>在不知道过了多长时间之后，又再次决定安装Linux系统，这次选择的仍然是Debian系统，而在这么长时间的Linux使用时间中，我使用时间最长的就是Debian，相较于arch、manjaro等等的发行版我仍然觉的Debian在一定程度上是很方便的，而且也是很基础便捷的使用方式。</p><h3 id="自己的Linux环境的配置"><a href="#自己的Linux环境的配置" class="headerlink" title="自己的Linux环境的配置"></a>自己的Linux环境的配置</h3><p>自己使用Linux环境的主要还是面对学习上的一些使用，具体各个环境配置如下</p><h4 id="写作环境"><a href="#写作环境" class="headerlink" title="写作环境"></a>写作环境</h4><p>主要是应对一些文档的书写和一些报告记录的需求，同时一些生信的工具在Linux环境下更具有优势，所以必要的论文环境也是有必要的。所以该部分配置如下：</p><ul><li>办公软件：libreoffice三件套/wps</li><li>思维导图：xmind</li><li>笔记软件：notion（网页）</li><li>论文环境：latex环境（清华大学开源镜像站）</li><li>生信绘图：Rstudio</li><li>md文档：typora</li></ul><h4 id="编程环境"><a href="#编程环境" class="headerlink" title="编程环境"></a>编程环境</h4><p>最常用的环境，能够完成我的学习目的</p><ul><li>编程软件：vscode、vim、codeblocks、jetbrains套件</li><li>浏览器： Google Chrome</li><li>终端： oh-my-fish</li><li>环境： java8、python3.7、gcc、g++、clang等等</li><li>终端工具： htop、neofetch</li></ul><h4 id="游戏环境"><a href="#游戏环境" class="headerlink" title="游戏环境"></a>游戏环境</h4><p>游戏的话，目前Linux能够支持的游戏数量越来越多，如果个人愿意的话可以折腾一下双显卡，对于游戏体验很win环境下面并没有太大的区别，但是我没有选择使用双显卡所以我这部分并没有写进去。</p><ul><li>岛风Go</li><li>POi（捞船必备）</li><li>steam（买了不少，嘿嘿嘿）</li><li>矮人要塞（经典中的经典，在之后我会选择加上一些图像包之后开始出一些教程之类的）</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>上面就是我平时最常用到的几个部分，当然还有一些我没着重讲的部分例如：如果选择在b站直播的话，会选择<strong>OBS- Studio</strong>虽然看弹幕的话，还是要另外再开一个设备进去看这，但是还是很方便的（直播姬的话好像也有Linux端的但是并没有想象中的那么好用，不知道现在版本维护的怎么样子）</p><h3 id="使用中的一些小问题"><a href="#使用中的一些小问题" class="headerlink" title="使用中的一些小问题"></a>使用中的一些小问题</h3><p>一般来说选择开箱即用的发行版会省去我们安装过程中很多的麻烦事（<del>费尽心思安装完成了arch结果当天晚上滚动更新立刻挂了</del>），所以我会结合我的使用经历，在未来也会和大家做更多的分享。我会把我的设备情况放在下面，如果有兴趣的小伙伴也可以一起来讨论。</p><p><img src="/Users/l_collection/blog/source/img/img002.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ACM】遇到的数学小问题</title>
    <link href="/2021/01/28/%E3%80%90ACM%E3%80%91%E9%81%87%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2021/01/28/%E3%80%90ACM%E3%80%91%E9%81%87%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><p>在做题的时候遇到了两个很有趣的问题，一个是组合数学中的<color>错排问题</color>，而另一个则是数学规律的推导。</p><h2 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h2><p>出自SDUT-2058 <a href="%E4%B8%89%E5%9B%BD%E8%BD%B6%E4%BA%8B%E2%80%94%E2%80%94%E5%B7%B4%E8%9C%80%E4%B9%8B%E5%8D%B1">https://acm.sdut.edu.cn/onlinejudge3/contests/3677/problems/F</a></p><p>这个问题的解决思路，是组合数学中的错排问题，这样的话我们可以直接使用错排公式直接解出答案。</p><p>*<em>D[n] = (n-1) * (D[n-1] + D[n-2])*</em></p><p>具体的推导内容并没有很仔细的整理，只是简单概括为当第一个进行错排时，会占据有n-1种错误的选择，而在占据一个错误的位置后会导致该位置的出现n-1种错误的选择。以此类推，每次都会出现这样的位置，一直出现到n-n=0的结果。</p><p>第二个问题是对与一些简单的数学知识的应用——切饼问题：在切n刀的情况下，能够出现的最大的块数R[n]。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/10/hello-world/"/>
    <url>/2021/01/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
